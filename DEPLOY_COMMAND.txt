# GitHub Actions Deployment Command
# Copy this command to your GitHub Actions deployment step

# === OPTION 1: Single-line deployment (recommended) ===
mkdir -p /home/mucks/tipjar && cd /home/mucks/tipjar && cat > docker-compose.yml << 'EOF'
version: '3.8'
services:
  tipjar-client:
    image: ghcr.io/YOUR_USERNAME/tipjar/tipjar-client:latest
    container_name: tipjar-web
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_SOLANA_NETWORK=${NEXT_PUBLIC_SOLANA_NETWORK}
    restart: unless-stopped
EOF
echo "NEXT_PUBLIC_SOLANA_NETWORK=${NEXT_PUBLIC_SOLANA_NETWORK}" > .env && docker pull ghcr.io/YOUR_USERNAME/tipjar/tipjar-client:latest && docker compose down || true && docker compose up -d && docker image prune -af && docker compose ps && echo "ðŸŽ‰ Deployment complete!"


# === OPTION 2: Multi-line script (easier to read) ===
#!/bin/bash
set -e

# Configuration
DEPLOY_DIR="/home/mucks/tipjar"
IMAGE_NAME="ghcr.io/YOUR_USERNAME/tipjar/tipjar-client:latest"
NETWORK="${NEXT_PUBLIC_SOLANA_NETWORK:-https://api.devnet.solana.com}"

# Create deployment directory
mkdir -p "$DEPLOY_DIR"
cd "$DEPLOY_DIR"

# Create docker-compose.yml
cat > docker-compose.yml << 'EOF'
version: '3.8'
services:
  tipjar-client:
    image: ghcr.io/YOUR_USERNAME/tipjar/tipjar-client:latest
    container_name: tipjar-web
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_SOLANA_NETWORK=${NEXT_PUBLIC_SOLANA_NETWORK}
    restart: unless-stopped
EOF

# Create .env file
echo "NEXT_PUBLIC_SOLANA_NETWORK=$NETWORK" > .env

# Pull and deploy
docker pull "$IMAGE_NAME"
docker compose down || true
docker compose up -d
docker image prune -af
docker compose ps

echo "ðŸŽ‰ Deployment complete!"


# === OPTION 3: Use the deploy.sh script ===
# 1. Copy deploy.sh to your server
# 2. Run: bash deploy.sh

# === IMPORTANT NOTES ===
# 1. Replace YOUR_USERNAME with your actual GitHub username
# 2. Use "docker compose" (with space) not "docker-compose" (with hyphen)
# 3. Deploy directory is /home/mucks/tipjar (will be created automatically)
# 4. Ensure the docker network exists if using Traefik/NPM

