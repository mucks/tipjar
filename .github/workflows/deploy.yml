name: Deploy Tipjar to Server

on:
  push:
    branches: [ main, master ]
    paths:
      - 'client/**'
      - '.github/workflows/deploy.yml'
      - 'docker-compose.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/tipjar-client

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Set variables
            DEPLOY_DIR="${{ secrets.DEPLOY_PATH || '/home/mucks/tipjar' }}"
            IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            TIPJAR_DOMAIN="${{ secrets.TIPJAR_DOMAIN || 'tipjar.mucks.me' }}"
            SOLANA_NETWORK="${{ secrets.SOLANA_NETWORK || 'https://api.devnet.solana.com' }}"
            
            echo "ðŸš€ Starting deployment to $DEPLOY_DIR..."
            
            # Create deployment directory (FIX: This was missing!)
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Create docker-compose.yml with Traefik support
            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            services:
              tipjar-client:
                image: ${IMAGE_NAME}
                container_name: tipjar-web
                expose:
                  - "3000"
                environment:
                  - NEXT_PUBLIC_SOLANA_NETWORK=${SOLANA_NETWORK}
                networks:
                  - web
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.tipjar.rule=Host(`${TIPJAR_DOMAIN}`)"
                  - "traefik.http.routers.tipjar.entrypoints=websecure"
                  - "traefik.http.routers.tipjar.tls.certresolver=letsencrypt"
                  - "traefik.http.services.tipjar.loadbalancer.server.port=3000"
                  - "traefik.http.routers.tipjar.middlewares=tipjar-headers"
                  - "traefik.http.middlewares.tipjar-headers.headers.customresponseheaders.X-Frame-Options=SAMEORIGIN"
                  - "traefik.http.middlewares.tipjar-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
                restart: unless-stopped
            networks:
              web:
                external: true
            EOF
            
            # Create .env file
            cat > .env << ENVEOF
            IMAGE_NAME=${IMAGE_NAME}
            SOLANA_NETWORK=${SOLANA_NETWORK}
            TIPJAR_DOMAIN=${TIPJAR_DOMAIN}
            ENVEOF
            
            # Pull the latest image
            echo "ðŸ“¦ Pulling latest image..."
            docker pull "$IMAGE_NAME"
            
            # Stop and remove old container (FIX: use "docker compose" not "docker-compose")
            echo "ðŸ›‘ Stopping old container..."
            docker compose down || true
            
            # Start new container
            echo "ðŸš€ Starting new container..."
            docker compose up -d
            
            # Clean up old images
            echo "ðŸ§¹ Cleaning up old images..."
            docker image prune -af
            
            # Show status
            echo "ðŸ“Š Container status:"
            docker compose ps
            
            echo ""
            echo "========================================"
            echo "ðŸŽ‰ Deployment complete!"
            echo "========================================"
            echo "Application: https://${TIPJAR_DOMAIN}"
            echo "========================================"

      - name: Health check
        run: |
          sleep 10
          curl -f ${{ secrets.SERVER_URL || format('http://{0}', secrets.SERVER_HOST) }} || exit 1

